SOPs for maintainers
********************

Building a virtual environment
------------------------------

Clone vreg package locally

cd to vreg top folder

On windows:
>>> python -m venv .venv           # create virtual environment
>>> .venv/Scripts/activate        # activate virtual environment

Then select the Python interpreter in the .venv folder. In VSCode:
View > Command Palette > Python select interpreter -> enter interpreter path 
(.venv/Scripts/python.exe)


Installation
------------

Install vreg from source:

>>> pip install -e path\to\vreg

Install tests requirements:

cd to vreg/tests
>>> pip install -r requirements.txt

Install docs requirements:

cd to vreg/docs
>>> pip install -r requirements.txt

Install dev requirements:

cd to vreg/dev
>>> pip install -r requirements.txt

To leave:
>>> deactivate


Enforce PEP8
------------

cd to /vreg top folder

To fix a single file
>>> autopep8 src/vreg/file.py --in-place

To fix the whole project
>>> autopep8 src/vreg --recursive --in-place --pep8-passes 2000 --verbose

Check any remaining isues and fix manually
>>> pycodestyle src/vreg --ignore=E501

Note agressive option - dangerous - may need debugging. Use carefully and test 
after changing
>>> autopep8 src/vreg/file.py --in-place --aggressive



Run test suite and check test coverage
--------------------------------------

cd to /vreg top folder
>>> pytest --cov=vreg --cov-report term-missing

To run a specific file (eg. test_utils) only, do:
>>> pytest tests/test_utils.py --cov=vreg --cov-report term-missing


Check tests in docstrings
-------------------------

To test file.py, cd to directpory of file.py, then do:
>>> pytest --doctest-modules file.py

To insert the expected test results, do:
>>> pytest --doctest-modules file.py --accept


Build documentation locally
---------------------------
cd to docs
>>> ./make html

To see the docs, open: vreg/docs/build/html/index.html

To make all autogenerated documentation from scratch, first delete all auto-generated content:

- delete docs/build
- delete all folders inside docs/source/generated/
- run docs/source/make_animations.py


Building release notes
----------------------
- Get a personal token on https://github.com/settings/tokens (does not need any permissions)
- Save the token in the environment variable GH_TOKEN. On windows:
>>> $env:GH_TOKEN='token'
- Build the changelog from current version to current dev. For instance:
>>> changelist QIB-Sheffield/vreg v0.0.2 main --format rst
- Copy-paste the terminal output in an .rst file and save it in docs/source/releases
- Edit the content of the file manually as needed
- Add an entry in the index of docs/source/releases


Creating a new release (from a fork)
------------------------------------

= Clear cache with vreg.fetch(clear_cache=True) or manually
= Enforce PEP8 (see above)
- Run the test suite in a clean environment (see above) and check test 
  coverage (see above)
- Add any new contributors to the teams.inc file (About)
- Update the version number in the below locations, push to dev and check that 
  all tests pass. Fix issues if not.
    - pyproject.toml
    - docs/source/conf.py
- Build release notes (see above), build and check the documentation, clear 
  the datafiles fodler, and push changes to dev. 
- Merge the dev branch with the main branch. 
  Check that the documentation builds OK. Check README.
- Create a release on github, with the main branch as target.
- Create a release on PyPI (see below).
- v1.0 and onwards: Create a versioned release on Zenodo


Creating a PyPi release
-----------------------

In the terminal, cd to the /vreg directory, and:

>>> python -m build
>>> twine upload dist/*

When prompted for user name, enter __token__

As password paste the API token generated in PyPi dcmri repository 
settings (https://pypi.org/manage/project/vreg/settings/). 
Note: Paste with Ctrl-V does not work in Windows. Use Edit > Paste via the menu.

