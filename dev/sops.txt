SOPs for maintainers
********************

Building a virtual environment
------------------------------

Clone vreg-package locally

cd to vreg-package top folder

On windows:
>>> python -m venv .venv           # create virtual environment
>>> .venv/Scripts/activate        # activate virtual environment

Then select the Python interpreter in the .venv folder. In VSCode:
View > Command Palette > Python select interpreter -> enter interpreter path 
(.venv/Scripts/python.exe)


Installation
------------

Install vreg from source:

>>> pip install -e path\to\vreg-package

Install tests requirements:

>>> pip install -r tests/requirements.txt

Install dev requirements:

>>> pip install -r dev/requirements.txt


Enforce PEP8
------------

cd to /vreg top folder

To fix a single file
>>> autopep8 src/vreg/file.py --in-place

To fix the whole project
>>> autopep8 src/vreg --recursive --in-place --pep8-passes 2000 --verbose

Check any remaining isues and fix manually
>>> pycodestyle src/vreg --ignore=E501

Note agressive option - dangerous - may need debugging. Use carefully and test 
after changing
>>> autopep8 src/vreg/file.py --in-place --aggressive


Run test suite and check test coverage
--------------------------------------

cd to /vreg top folder
>>> pytest --cov=vreg --cov-report term-missing

To run a specific file (eg. test_utils) only, do:
>>> pytest tests/test_utils.py --cov=vreg --cov-report term-missing


Check tests in docstrings
-------------------------

To test file.py, cd to directory of file.py, then do:
>>> pytest --doctest-modules file.py

To insert the expected test results, do:
>>> pytest --doctest-modules file.py --accept


Creating a new release (from a fork)
------------------------------------

= Clear cache with vreg.fetch(clear_cache=True) or manually
= Enforce PEP8 (see above)
- Run the test suite in a clean environment (see above) and check test 
  coverage (see above)
- Update the version number in pyproject.toml to the below locations, 
  push to dev and check that all tests pass. Fix issues if not.
- Merge the dev branch with the main branch. 
- Create a release on github, with the main branch as target.
- Create a release on PyPI (see below).
- in docs repository - build release notes and update website


Creating a PyPi release
-----------------------

In the terminal, cd to the /vreg directory, and:

>>> python -m build
>>> twine upload dist/*

When prompted for user name, enter __token__

As password paste the API token generated in PyPi dcmri repository 
settings (https://pypi.org/manage/project/vreg/settings/). 
Note: Paste with Ctrl-V does not work in Windows. Use Edit > Paste via the menu.

